
lombok.RequiredArgsConstructor
框架
swagger
mybatis-plus
hutool工具包
org.springframework.data.redis.core.RedisTemplate#opsForHash
异步生成兑换码
流式编程 java.util.stream.Stream#collect(java.util.stream.Collector<? super T,A,R>)
cn.hutool.core.bean.BeanUtil
 线程池策略
java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy
java 11 新特性
java.util.stream.Collectors#groupingBy(java.util.function.Function<? super T,? extends K>, java.util.stream.Collector<? super T,A,D>)
执行lua脚本
org.springframework.data.redis.core.RedisTemplate#execute(org.springframework.data.redis.core.script.RedisScript<T>, java.util.List<K>, java.lang.Object...)


兑换码的需求
- 可读性好：兑换码是要给用户使用的，用户需要输入兑换码，因此可读性必须好。我们的要求：
  - 长度不超过10个字符
  - 只能是24个大写字母和8个数字：ABCDEFGHJKLMNPQRSTUVWXYZ23456789
- 数据量大：优惠活动比较频繁，必须有充足的兑换码，最好有10亿以上的量
- 唯一性：10亿兑换码都必须唯一，不能重复，否则会出现兑换混乱的情况
- 不可重兑：兑换码必须便于校验兑换状态，避免重复兑换
- 防止爆刷：兑换码的规律性不能很明显，不能轻易被人猜测到其它兑换码
- 高效：兑换码生成、验证的算法必须保证效率，避免对数据库带来较大的压力

Base32转码 自增id
BitMap 重兑校验 
JWT技术 防刷校验
线程池异步生成兑换码

XXL-JOB的数据分片


接口说明 领取发放中的优惠券
请求方式 POST
请求路径 /user-coupons/{id}/receive
请求参数 路径占位符，优惠券id
返回值 无

优惠券一系列的校验：
- 校验优惠券是否存在，不存在无法领取
- 校验优惠券的发放时间，是不是正在发放中
- 校验优惠券剩余库存是否充足
- 校验优惠券的每人限领数量

只有全部校验通过，才可以领取优惠券，而领券要做两件事：
- 新增一个记录到user_coupon表
- 更新coupon表中已经领取的数量


兑换码是否兑换则要利用BitMap
